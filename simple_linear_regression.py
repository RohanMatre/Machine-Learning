# Simple Linear Regression :# Formula - y = b0 + b1*x1# where y = dependent variable(DV),x1 = Independent variable(IV), b1 = Coefficient, b0 = Constant # salary = b0 + b1*Experience  # Ordinary Least Squares # Sum(y-y^)2 -> min# 1. Importing the libraries import numpy as npimport matplotlib.pyplot as pltimport pandas as pd # 2. Importing the datasetdataset = pd.read_csv('Salary_Data.csv')x = dataset.iloc[:,  :-1].values  # [:, :-1] - left : means take all the lines & : Right means take all columns except last one.y = dataset.iloc[:,  1].values    # [:, 3] taking col 3 only# x is matrix bcz (30,1) # y is vector bcz (30,)# 3. Splitting Dataset into the Training set and Test setfrom sklearn.model_selection import train_test_splitx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1/3, random_state=0)# Imp Points  --> Overfeeding --> prevent by Regularity Techique # 1. we need to make 2 different dataset --> a. Train b. Test# a. Train - Train set on which ML model Learns# b. Test - Test set in which we test if ML model learns correctly corelations# 4. Feature Scaling ---> Not required here# Euclidean Distance Formula Between P1 & P2 - sqrt((x2-x1)^2 + (y2-y1)^2)# Standardisation - # Xstand = x - mean(x)/standard deviation(x)# Normalisation - # Xnorm = x - min(x)/max(x) - min(x)# from sklearn.preprocessing import StandardScaler# sc_x = StandardScaler() # x_train = sc_x.fit_transform(x_train)# x_test = sc_x.transform(x_test)# Fitting Simple Linear Regression to the Training Set from sklearn.linear_model import LinearRegressionregressor = LinearRegression()regressor.fit(x_train, y_train)# Predicting the Test set resultsy_pred = regressor.predict(x_test)# y_test = Real salary & y_pred = (Predicted)Expected Salary# Visualising the Training set resultsplt.scatter(x_train,y_train,color = 'red')plt.plot(x_train,regressor.predict(x_train), color = 'blue')plt.title('Salary vs Experience(Training set)')plt.xlabel('Years of Experience')plt.ylabel('Salary')plt.show()# label to x-axis - Experience & y-axis - Salary# Visualising the Test set resultsplt.scatter(x_test,y_test,color = 'red')plt.plot(x_train,regressor.predict(x_train), color = 'blue')plt.title('Salary vs Experience(Test set)')plt.xlabel('Years of Experience')plt.ylabel('Salary')plt.show()